theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="none")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
subset(T1E.Plot, range_autocor1== "r = 30km")
dat30 = subset(T1E.Plot, range_autocor1== "r = 30km")
View(dat30)
dat30 = subset(T1E, range_autocor1== "r = 30km")
View(dat30)
7*2*200/60
5/6
90*.83
90*(1-.83)
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.07,0.09,0.11,0.2,0.3,0.4,0.6,0.08))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(strip.text.y=element_blank())+
theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="none")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.07,0.09,0.11,0.2,0.3,0.4,0.6,0.08))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(strip.text.y=element_blank())+
theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6,0.08))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(strip.text.y=element_blank())+
theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(strip.text.y=element_blank())+
theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.grid.major=element_blank(), panel.grid.minor = element_blank(), panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))+
ggtitle("s = 1km")
T1E.Plot_all
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))
T1E.Plot_all
ggsave(file="~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Plots/T1EResultsALL.pdf", width=10, height=8)
ggsave(file="~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Plots/T1EResultsALL.pdf", width=10, height=8, units="in")
T1E$range_autocor1 = factor(T1E$range_autocor1, levels = c(0,1000,5000,10000,30000), labels=c("r = 0km","r = 1km","r = 5km","r = 10km", "r = 30km"))
T1E = dat2 %>% group_by(range_autocor1, range_autocor2,range_autocor3, beta1, beta2, sigma_e, spatial_pattern, variable,n.sites,unscaled, iter) %>%
summarise(T1E=t1e(value), N.naomit = n.naomit(value))
T1E = data.frame(T1E)
T1E$range_autocor2 = factor(T1E$range_autocor2, levels = c(0,1000,5000,10000), labels=c("No autocorrelation","s = 1km","s = 5km","s = 10km"))
T1E$range_autocor1 = factor(T1E$range_autocor1, levels = c(0,1000,5000,10000,30000), labels=c("r = 0km","r = 1km","r = 5km","r = 10km", "r = 30km"))
T1E$sigma_e = factor(T1E$sigma_e, levels = c(0.25,1), labels = c("sigma_e = 0.25","sigma_e = 1"))
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))
T1E.Plot_all
T1E.Plot_all
summary(T1E)
T1E = dat2 %>% group_by(range_autocor1, range_autocor2,range_autocor3, beta1, beta2, sigma_e, spatial_pattern, variable,n.sites,unscaled, iter) %>%
summarise(T1E=t1e(value), N.naomit = n.naomit(value))
T1E = data.frame(T1E)
T1E$range_autocor2 = factor(T1E$range_autocor2, levels = c(0,1000,5000,10000), labels=c("s = 0km","s = 1km","s = 5km","s = 10km"))
T1E$range_autocor1 = factor(T1E$range_autocor1, levels = c(0,1000,5000,10000,30000), labels=c("r = 0km","r = 1km","r = 5km","r = 10km", "r = 30km"))
T1E$sigma_e = factor(T1E$sigma_e, levels = c(0.25,1), labels = c("sigma_e = 0.25","sigma_e = 1"))
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))
T1E.Plot_all
vars_in_final= c("pval.estimate.0","pval.estimate.Variogram","pval.estimate.PlugIn","pval.estimate.EmpiricalMSE_var.iter","pval.lm")
T1E.Plot = subset(T1E, variable %in%vars_in_final)
T1E.Plot$Method =  T1E.Plot$variable
T1E.Plot$Method = factor(T1E.Plot $Method , levels = vars_in_final, labels=c("IID" , "Practical Range", "Plug in", "Empirical MSE","LM"), ordered=TRUE)
T1E.Plot$spatial_pattern = factor(T1E.Plot$spatial_pattern, levels=c("orig","regular"), labels=c("Irregularly spaced", "Regularly spaced"))
T1E.Plot_all = ggplot(subset(T1E.Plot, range_autocor1 != "r = 30km"), aes(x=n.sites, y=T1E, colour=Method,pch=Method, lty=Method))+geom_line()+geom_point()+facet_grid(spatial_pattern*sigma_e~range_autocor1*range_autocor2)+geom_hline(yintercept=0.05)
T1E.Plot_all =T1E.Plot_all+   theme(strip.text.y = element_text(size = 8))+  scale_y_log10(breaks =  c(0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.6))+
scale_fill_brewer(palette = "Dark2")+
theme_bw(base_size = 12) +
theme( axis.text.x = element_text(angle=90, vjust=1)) +
theme(strip.background =element_rect(colour="black", fill=NA), panel.border = element_rect(colour = "black"))+
theme(panel.border=element_blank(), strip.background=element_blank())+
theme(axis.line.x=element_line(colour="black"))+
theme(axis.text=element_text(size=7))+
ylab("Type I error rate")+
xlab("Sample size")+
theme(axis.line.y=element_line())+
theme(panel.margin.x = unit(0.5, "lines"))+
theme(legend.position="bottom")+
theme(plot.margin = unit(c(1,0,0,0), "cm"))
T1E.Plot_all
ggsave(file="~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Plots/T1EResultsALL.pdf", width=10, height=8, units="in")
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60))
load("PlayData_for_Examples.RData") ### load the data for the examples
source("LoadFunctions.R") #### Source the functions required to run the block bootstrap
rm(list=ls())
source("LoadFunctions.R") #### Source the functions required to run the block bootstrap
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60))
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60))
load("PlayData_for_Examples.RData") ### load the data for the examples
source("LoadFunctions.R") #### Source the functions required to run the block bootstrap
library(ggplot2)
library(gstat)
library(sp)
x.range=range(x)
y.range=range(y)
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.01), y = seq(from = y.range[1], to = y.range[2], by = 0.01))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
xy=SpatialPoints(coords=cbind(x,y))
idw <- idw(formula = dat$temperature ~ 1, locations = xy, newdata = grd)  # apply idw model for the data
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))+scale_fill_gradient2(low="blue", high="red", guide = guide_legend(title="temp")) +  geom_point(data = dat, aes(x = x, y = y, colour=response))
#ggsave("Exploration_plot_example1.pdf")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))+scale_fill_gradient2(low="blue", high="red", guide = guide_legend(title="temp")) +  geom_point(data = dat, aes(x = x, y = y, colour=as.factor(PresAbsresponse)) )
#ggsave("Exploration_plot_example1.pdf")
plot(response~temperature, data=dat)
#add the line of best fit
fit1 = lm ("response~temperature", data=dat)
abline(fit1,col="red")
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60))
load("PlayData_for_Examples.RData") ### load the data for the examples
source("LoadFunctions.R") #### Source the functions required to run the block bootstrap
set.seed(42)
fit1 = lm (response ~ temperature, data = dat)
summary(fit1)
ini.vals <- expand.grid(seq(0,10,l=100), seq(0,1,l=100)) #inital values for variofit
variogram_block_length = select_b_length_off_variogram_envelope(x,y,resids = fit1$resid,
max.dist = 0.4, breaks=c(0,0.025,0.05,0.075,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.7,0.8,1.5),ini=ini.vals)
variogram_block_length
BetaCoeff = function(dat){
fit1 = lm ("response~temperature", data=dat)
Beta = fit1$coefficients["temperature"]
Beta
}
lookuptables.folderpathname = "LookupTables/"
Results = BlockBootApply (x = x ,y = y ,block_Ls = c(0,0.05,0.1, 0.2), Grid_space = 0.01 ,
dat = dat ,
Stat.function = BetaCoeff,  tuning_block_length = 4,
NBoot = 500, method.block.length.select = "Lahiri",
type="SE", lookuptables.folderpath=lookuptables.folderpathname)
Results$Empirical.MSE
Results$Lahiri_block_size
names(Results)
Results
BlockBootApply
Results = BlockBootApply (x = x ,y = y ,block_Ls = c(0,0.05,0.1, 0.2), Grid_space = 0.01 ,
dat = dat ,
Stat.function = BetaCoeff,  tuning_block_length = 0.2,
NBoot = 500, method.block.length.select = "EmpiricalMSE",
type="SE", lookuptables.folderpath=lookuptables.folderpathname)
Results
names(Results)
Results$EmpiricalMSE_block_size
Results$SE.estimate.EmpiricalMSE_block_size
Results$Empirical.MSE
Results$EmpiricalMSE_block_size.iter
Results$EmpiricalMSE_block_size.iter.unscaled
Results$EmpiricalMSE_block_size.unscaled
Results$tuning_block_length
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/Functions/BlockBoot_apply.R')
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/Functions/BlockBoot_apply.R')
Results = BlockBootApply (x = x ,y = y ,block_Ls = c(0,0.05,0.1, 0.2), Grid_space = 0.01 ,
dat = dat ,
Stat.function = BetaCoeff,  tuning_block_length = 0.2,
NBoot = 500, method.block.length.select = "EmpiricalMSE",
type="SE", lookuptables.folderpath=lookuptables.folderpathname)
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/Functions/BlockBoot_apply.R')
Results = BlockBootApply (x = x ,y = y ,block_Ls = c(0,0.05,0.1, 0.2), Grid_space = 0.01 ,
dat = dat ,
Stat.function = BetaCoeff,  tuning_block_length = 0.2,
NBoot = 500, method.block.length.select = "EmpiricalMSE",
type="SE", lookuptables.folderpath=lookuptables.folderpathname)
Results$Empirical.MSE
Results$EmpiricalMSE_block_size
Results
BlockBootApply
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/Functions/BlockBoot_apply.R')
Results = BlockBootApply (x = x ,y = y ,block_Ls = c(0,0.05,0.1, 0.2), Grid_space = 0.01 ,
dat = dat ,
Stat.function = BetaCoeff,  tuning_block_length = 0.2,
NBoot = 500, method.block.length.select = "EmpiricalMSE",
type="SE", lookuptables.folderpath=lookuptables.folderpathname)
Results$Empirical.MSE
Results$EmpiricalMSE_block_size
Results$SE.estimate.EmpiricalMSE_block_size
Results
names(Results)
names(Results$Empirical.VAR)
names(Results$Empirical.BIAS2)
names(Results$sigma_stat_subregion
)
Results$Empirical.BIAS2
Results$Empirical.VAR
)Results$SE.estimate.EmpiricalMSE.iter
Results$SE.estimate.EmpiricalMSE.iter
Results$SE.estimate.EmpiricalMSE.unscaled
Results$SE.estimate.EmpiricalMSE.unscaled.iter
knitr::opts_chunk$set(echo = TRUE)
anova.results
anova.results
knitr::opts_chunk$set(echo = TRUE)
load("PlayData_for_Examples.RData") ### load the data for the examples
source("LoadFunctions.R") #### Source the functions required to run the block bootstrap
#Install packages if required
if(!require(mvabund)) { install.packages("mvabund", repos = "http://cran.us.r-project.org");
require(mvabund) }
library(mvabund)
set.seed(42)
lookuptables.folderpathname = "LookupTables/"
######## Get a bootID matrix (takes a minute or two)
BootID.example2 = BlockBootID(x = x ,
y = y,
block_Ls = 0.1,
NBoot = 500,
Grid_space = 0.01,
lookuptables.folderpath =  lookuptables.folderpathname)
responseMultiSpecies=mvabund(multispecies_dat[,1:20]) #20 species multivariate reponse
mod.1  = manyglm(responseMultiSpecies~temperature, data = multispecies_dat,family="binomial")
mod.2  = manyglm(responseMultiSpecies~temperature*treatment, data = multispecies_dat,family="binomial")
anova.results = anova(mod.1, mod.2, bootID=BootID.example2, resamp="case")
responseMultiSpecies=mvabund(multispecies_dat[,1:20]) #20 species multivariate reponse
mod.1  = manyglm(responseMultiSpecies~temperature, data = multispecies_dat,family="binomial")
mod.2  = manyglm(responseMultiSpecies~temperature*treatment, data = multispecies_dat,family="binomial")
anova.results = anova(mod.1, mod.2, bootID=BootID.example2, resamp="case")
anova.results
rm(list=ls())
load("PlayData_for_Examples.RData") ### load the data for the examples
Thomas1  = rThomas(0.03, 2, 3, win = owin(c(0, 100), c(0, 100)))[1:500, ]
library(geoR)
Thomas1  = rThomas(0.03, 2, 3, win = owin(c(0, 100), c(0, 100)))[1:500, ]
library(RandomFields)
library(spatstat)
library(mvabund)
Thomas1  = rThomas(0.03, 2, 3, win = owin(c(0, 100), c(0, 100)))[1:500, ]
x =Thomas1$x
y =Thomas1$y
nspec=22 #number of species
range_autocor1 = c(20) #range parameter for spatial covariate x1
range_autocor2 = c(10)  #range parameter for spatial random effect x2 to induce spatial autocorrelation
beta1.assemblage = rnorm(nspec,1,1) #coeff of x1
View(multispecies_dat)
range_autocor1 = c(20) #range parameter for spatial covariate x1
range_autocor2 = c(10)  #range parameter for spatial random effect x2 to induce spatial autocorrelation
range_autocor3 = c(10)  #range parameter for treatment
beta1.assemblage = rnorm(nspec,1,1) #coeff of x1
beta2.assemblage = rnorm(nspec,1,1) #coeff of x2
range2.assemblage = sapply(rnorm(nspec,range_autocor2,1), function(x){max(x, 0.000001)})
sigma_e =1
x1 = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range_autocor1),
x = x,
y = y,
grid = F,
n = 1
)$variable1
response = matrix(nrow=nsites, ncol=nspec)
library(MASS)
err_spec = mvrnorm(n=1, mu=rep(0,nspec), Sigma=Sig)
load(file="/home/z3354192/hdrive/z3354192/MovingBlockBootStrap/Resubmission/New Code/Motivating Example/Sig.RData")
err_spec = mvrnorm(n=1, mu=rep(0,nspec), Sigma=Sig)
for (speci in 1:nspec){
x2 = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range2.assemblage[speci]),
x =x,
y = y,
grid = F,
n = 1
)$variable1
#uncorrelated species
err = rnorm(nsites, 0,1)
beta0.assemblage =-2
linear.response = beta0.assemblage + beta1.assemblage[speci]  %*% x1 + beta2.assemblage[speci]  %*%    x2 +sigma_e * err +err_spec[speci]
count.response = rnbinom(n = nsites, size=1, mu=exp(linear.response) )
count.response = round(exp(linear.response) )
response[,speci] = count.response
}
nsites=500
for (speci in 1:nspec){
x2 = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range2.assemblage[speci]),
x =x,
y = y,
grid = F,
n = 1
)$variable1
#uncorrelated species
err = rnorm(nsites, 0,1)
beta0.assemblage =-2
linear.response = beta0.assemblage + beta1.assemblage[speci]  %*% x1 + beta2.assemblage[speci]  %*%    x2 +sigma_e * err +err_spec[speci]
count.response = rnbinom(n = nsites, size=1, mu=exp(linear.response) )
count.response = round(exp(linear.response) )
response[,speci] = count.response
}
err_spec = mvrnorm(n=1, mu=rep(0,nspec), Sigma=Sig)
Sig
err_spec = mvrnorm(n=1, mu=rep(0,nspec), Sigma=Sig[1:nspec,1:nspec])
for (speci in 1:nspec){
x2 = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range2.assemblage[speci]),
x =x,
y = y,
grid = F,
n = 1
)$variable1
#uncorrelated species
err = rnorm(nsites, 0,1)
beta0.assemblage =-2
linear.response = beta0.assemblage + beta1.assemblage[speci]  %*% x1 + beta2.assemblage[speci]  %*%    x2 +sigma_e * err +err_spec[speci]
count.response = rnbinom(n = nsites, size=1, mu=exp(linear.response) )
count.response = round(exp(linear.response) )
response[,speci] = count.response
}
response = matrix(nrow=nsites, ncol=nspec)
for (speci in 1:nspec){
x2 = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range2.assemblage[speci]),
x =x,
y = y,
grid = F,
n = 1
)$variable1
#uncorrelated species
err = rnorm(nsites, 0,1)
beta0.assemblage =-2
linear.response = beta0.assemblage + beta1.assemblage[speci]  %*% x1 + beta2.assemblage[speci]  %*%    x2 +sigma_e * err +err_spec[speci]
count.response = rnbinom(n = nsites, size=1, mu=exp(linear.response) )
count.response = round(exp(linear.response) )
response[,speci] = count.response
}
response = mvabund(response)
library(raster)
treatment  =
RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range_autocor3),
x = x,
y = y,
grid = F,
n = 1
)$variable1
hist(treatment)
treatment  = cut_number(
RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range_autocor3),
x = x,
y = y,
grid = F,
n = 1
)$variable1,2)
treatment
?cut_number
treatment  = factor(cut_number(
RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range_autocor3),
x = x,
y = y,
grid = F,
n = 1
)$variable1,2),labels=c("control","treatment"))
View(multispecies_dat)
response
temperature = RandomFields::RFsimulate(
model = RandomFields::RMexp(var = 1, scale = range_autocor1),
x = x,
y = y,
grid = F,
n = 1
)$variable1
multispecies_dat = cbind(reponse, treatment, temperature)
multispecies_dat = cbind(response, treatment, temperature)
set.seed(42)
lookuptables.folderpathname = "LookupTables/"
######## Get a bootID matrix (takes a minute or two)
BootID.example2 = BlockBootID(x = x ,
y = y,
block_Ls = 0.1,
NBoot = 500,
Grid_space = 0.01,
lookuptables.folderpath =  lookuptables.folderpathname)
source("LoadFunctions.R")
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/LoadFunctions.R')
setwd("~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users")
source('~/hdrive/z3354192/MovingBlockBootStrap/Resubmission/Code for users/LoadFunctions.R')
BootID.example2 = BlockBootID(x = x ,
y = y,
block_Ls = 0.1,
NBoot = 500,
Grid_space = 0.01,
lookuptables.folderpath =  lookuptables.folderpathname)
